{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Airline Loyalty Causal Inference\"\n",
        "format: gfm\n",
        "---\n",
        "\n",
        "\n",
        "## Milestone 1: Project Idea\n",
        "\n",
        "I love anything airline related, so my idea is to analyze some airline data to see if one thing causes another. Specifically, I want to see if having an airline's loyalty card increases the revenue that customer makes for the airline (called CLV or Customer Lifetime Value).\n",
        "\n",
        "## Milestone 2: Data Story\n",
        "\n",
        "Causal Inference Question:\n",
        "Does having a higher loyalty card status (Star, Nova, Aurora) cause an increase in CLV?\n",
        "\n",
        "Context:\n",
        "I want to study if having a higher loyalty card status for an airline causes an increase in CLV. CLV is Customer Lifetime Value. It is computed as the sum of all revenues (or invoices) generated by the customer for their flight bookings over their entire membership period. Basically, it's how much total revenue a specific customer is expected to generate. The Star loyalty card is the highest, Nova is the next highest, and Aurora is third highest. In the data, only these 3 loyalties are listed.\n",
        "\n",
        "The outcome would be positive and continuous values because it's how much revenue is expected to be made under the CLV. Other predictor variables that could influence CLV is salary, education level, marital status, total flights, and enrollment year/month. Other variables that could influence our outcome could be country of residence, gender, distance traveled, points redeemed, and dollar cost of points redeemed.\n",
        "\n",
        "My story is that I believe that having a loyalty card increases the revenue you will make for the airline.\n",
        "\n",
        "https://www.kaggle.com/datasets/agungpambudi/airline-loyalty-campaign-program-impact-on-flights/data\n",
        "\n",
        "\n",
        "## Milestone 3: DAG\n",
        "\n",
        "This is the first DAG I created.\n",
        "\n",
        "![Initial Old DAG](../figures/Old_DAG.png)\n",
        "\n",
        "This is the second DAG I created. I add more variables because I have most of these columns in my dataset.\n",
        "\n",
        "![Second Iteration of Initial Old DAG](../figures/Old_DAG_Updated.png)\n",
        "\n",
        "## Milestone 4: Identification Strategy\n",
        "\n",
        "Based on the DAG, here are all possible paths (23 paths) from LCS (Loyalty Card Status) to CLV (Customer Lifetime Value):\n",
        "\n",
        "* LCS, CLV\n",
        "* LCS, I, CLV\n",
        "* LCS, I, TF, CLV\n",
        "* LCS, I, TF, FD, CLV\n",
        "* LCS, I, TF, CMS, CLV\n",
        "* LCS, I, TF, CMS, CE, CLV\n",
        "* LCS, TF, CLV\n",
        "* LCS, TF, I, CLV\n",
        "* LCS, TF, FD, CLV\n",
        "* LSC, TF, CMS, CLV\n",
        "* LCS, TF, CMS, CE, CLV\n",
        "* LCS, CMS, CLV\n",
        "* LCS, CMS, CE, CLV\n",
        "* LCS, CMS, TF, CLV\n",
        "* LCS, CMS, TF, FD, CLV\n",
        "* LCS, CMS, TF, I, CLV\n",
        "* LCS, CE, CLV\n",
        "* LCS, CE, CMS, CLV\n",
        "* LCS, CE, CMS, TF, CLV\n",
        "* LCS, CE, CMS, TF, FD, CLV\n",
        "* LCS, CE, CMS, TF, I, CLV\n",
        "* LCS, UP, CLV\n",
        "* LCS, LTE, CLV\n",
        "\n",
        "Direct pipes, Can estimate total causal effect through them\n",
        "\n",
        "* LCS, UP, CLV\n",
        "* LCS, LTE, CLV\n",
        "\n",
        "Here are the backdoors & what to do about them:\n",
        "\n",
        "* LCS, I, CLV  --  Fork, Condition on I\n",
        "* LCS, I, TF, CLV -- Fork, Pipe, Condition on TF\n",
        "* LCS, I, TF, FD, CLV -- Fork, Pipe, Pipe, Condition on FD (?)\n",
        "* LCS, I, TF, CMS, CLV --Fork, Collider, Fork, Condition on CMS\n",
        "* LCS, I, TF, CMS, CE, CLV -- Fork, Collider, Fork, Pipe, Condition on CE (??)\n",
        "* LCS, TF, CLV -- Fork, Condition on TF\n",
        "* LCS, TF, I, CLV -- Fork, Pipe, Condition on I\n",
        "* LCS, TF, FD, CLV -- Fork, Pipe, Condition on FD (?)\n",
        "* LSC, TF, CMS, CLV -- Pipe, Fork, Condition on CMS\n",
        "* LCS, TF, CMS, CE, CLV -- Pipe, Fork, Pipe, Condition on CE\n",
        "* LCS, CMS, CLV -- Fork, Condition on CMS\n",
        "* LCS, CMS, CE, CLV -- Fork, Pipe, Condition on CE (?)\n",
        "* LCS, CMS, TF, CLV -- Fork, Pipe, Condition on CMS (?)\n",
        "* LCS, CMS, TF, FD, CLV -- Fork, Pipe, Pipe, Condition on CMS & TF (??)\n",
        "* LCS, CMS, TF, I, CLV -- Fork, Collider, Fork, Condition on CMS, TF, & I (all are needed in the end I believe) (?) \n",
        "* LCS, CE, CLV -- Fork, Condition on CE\n",
        "* LCS, CE, CMS, CLV -- Pipe, Fork, Condition on CE or CMS\n",
        "* LCS, CE, CMS, TF, CLV -- Pipe, Fork, Pipe, Condition on CE or CMS or TF (all are needed in the end I believe) (?)\n",
        "* LCS, CE, CMS, TF, FD, CLV -- Pipe, Fork, Pipe, Pipe, Condition on CE or CMS or TF (all are needed in the end I believe) (?)\n",
        "* LCS, CE, CMS, TF, I, CLV -- Pipe, Fork, Collider, Fork, Condition on CE or CMS or TF or I (all are needed in the end I believe) (?)\n",
        "\n",
        "Adjustment Set: I, TF, CMS, and CE.\n",
        "\n",
        "## Milestone 5: Simulate Data and Recover Parameters\n"
      ],
      "id": "1de578f6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import polars as pl\n",
        "import seaborn as sns\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "# Set the parameter values.\n",
        "beta0 = 1000\n",
        "income = 70000\n",
        "flight_dist = 3500\n",
        "travel_freq = 5\n",
        "cust_marketing_strat = 1\n",
        "cust_engagement = 3\n",
        "loyalty_card_status = 1000\n",
        "n = 100\n",
        "\n",
        "sim_data = (\n",
        "    # Simulate predictors using appropriate np.random distributions.\n",
        "    pl.DataFrame({\n",
        "        'x': np.random.uniform(0, 7, size=n),\n",
        "        'flight_dist': np.random.uniform(0, 10000, size=n),\n",
        "        'travel_freq': np.random.uniform(1, 10, size=n),\n",
        "        'cust_marketing_strat': np.random.uniform(0, 5, size=n),\n",
        "        'cust_engagement': np.random.uniform(1, 10, size=n),\n",
        "        'loyalty_card_status': np.random.choice([0, 1], size=n)  # New binary predictor\n",
        "    })\n",
        "    # Use predictors and parameter values to simulate the outcome.\n",
        "    .with_columns([ \n",
        "        (\n",
        "            beta0 + income * pl.col('x') + flight_dist * pl.col('flight_dist') +\n",
        "            travel_freq * pl.col('travel_freq') +\n",
        "            cust_marketing_strat * pl.col('cust_marketing_strat') +\n",
        "            cust_engagement * pl.col('cust_engagement') +\n",
        "            loyalty_card_status * pl.col('loyalty_card_status') +  # Adding loyalty_card_status with a coefficient (e.g., 1000)\n",
        "            np.random.normal(0, 3, size=n)\n",
        "        ).alias('CLV')  # Renaming y to CLV\n",
        "    ])\n",
        ")\n",
        "\n",
        "# Display the data\n",
        "sim_data\n",
        "\n",
        "# Visualize the data\n",
        "# sns.scatterplot(data=sim_data, x='x', y='CLV')\n",
        "# sns.lmplot(data=sim_data, x='x', y='CLV', height=6, aspect=1, scatter_kws={'s': 10}, line_kws={'color': 'red'})\n",
        "\n",
        "# Specify the X matrix and CLV vector.\n",
        "X = sim_data[['x', 'flight_dist', 'travel_freq', 'cust_marketing_strat', 'cust_engagement', 'loyalty_card_status']]\n",
        "CLV = sim_data['CLV']\n",
        "\n",
        "# Create a linear regression model.\n",
        "model = LinearRegression(fit_intercept=True)\n",
        "# Train the model.\n",
        "model.fit(X, CLV)\n",
        "\n",
        "# Print the coefficients\n",
        "print(f'Intercept: {model.intercept_}')\n",
        "print(f'Slope for x: {model.coef_[0]}')\n",
        "print(f'Slope for flight_dist: {model.coef_[1]}')\n",
        "print(f'Slope for travel_freq: {model.coef_[2]}')\n",
        "print(f'Slope for cust_marketing_strat: {model.coef_[3]}')\n",
        "print(f'Slope for cust_engagement: {model.coef_[4]}')\n",
        "print(f'Slope for loyalty_card_status: {model.coef_[5]}')\n",
        "\n",
        "# Have you recovered the parameters?\n",
        "# Yes"
      ],
      "id": "b9e783f5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "In this code, a simulated dataset is created using various predictors (independent variables) to estimate the Customer Lifetime Value (CLV), which is the outcome (dependent variable). The code first defines the parameter values for each predictor, including factors like income, flight distance, travel frequency, customer marketing strategy, customer engagement, and loyalty card status. It then generates random values for these predictors and combines them in a linear equation to simulate CLV. This equation also includes a small amount of random noise to make the data more realistic.\n",
        "\n",
        "After generating the data, a linear regression model is applied to it using the `LinearRegression` function from the `sklearn` library. The model is trained using the predictors (`X`) and the simulated CLV values. Once the model is trained, the code prints the estimated coefficients for each predictor, which represent how each variable impacts the CLV. By examining these coefficients, we can understand the relationship between the predictors and CLV.\n",
        "\n",
        "## Milestone 6: Exploratory Data Analysis\n",
        "\n",
        "Loyalty Card Status is whether or not you have an airline loyalty card, whether that's Star, Nova, or Aurora.\n",
        "Here is a break down of the data by type of loyalty card. We can see that most people have the highest loyalty card, Star, followed by Nova and then by Aurora.\n"
      ],
      "id": "3b52e893"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "# Create a bar plot for loyalty_card_status\n",
        "ax = sns.countplot(x='Loyalty Card', data=data)\n",
        "\n",
        "# Set labels and title\n",
        "plt.xlabel('Loyalty Card Status')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Distribution of Loyalty Card Status')\n",
        "\n",
        "# Add the count labels on top of the bars without decimals\n",
        "for p in ax.patches:\n",
        "    ax.annotate(f'{int(p.get_height())}', \n",
        "                (p.get_x() + p.get_width() / 2., p.get_height()), \n",
        "                ha='center', va='center', \n",
        "                fontsize=12, color='black', \n",
        "                xytext=(0, 5), textcoords='offset points')\n",
        "\n",
        "# Save the figure\n",
        "plt.savefig('../figures/loyalty_card_distribution_bar_chart.png', dpi=300, bbox_inches='tight')"
      ],
      "id": "3ebd14bb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Loyalty Card Status Bar Chart](../figures/loyalty_card_distribution_bar_chart.png)\n",
        "\n",
        "Most people have an income between roughly $80,000 and $125,000. This is expected. There are of course some who have higher salaries, hence the right skew.\n"
      ],
      "id": "e8100fc2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "# Clean the data by removing null, empty, and negative salary values\n",
        "data_clean = data[data['Salary'].notnull() & (data['Salary'] != '')]\n",
        "data_clean = data_clean[data_clean['Salary'] >= 0]\n",
        "\n",
        "# Plot the histogram\n",
        "plt.hist(data_clean['Salary'], bins=8, color='skyblue', edgecolor='black')\n",
        "plt.title('Histogram of Salary')\n",
        "plt.xlabel('Salary')\n",
        "plt.ylabel('Frequency')\n",
        "\n",
        "# Save the figure\n",
        "plt.savefig('../figures/salary_histogram.png', dpi=300, bbox_inches='tight')"
      ],
      "id": "deb9c537",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Salary Histogram](../figures/salary_histogram.png)\n",
        "\n",
        "Most people have an income between roughly $80,000 and $125,000. This is expected. There are of course some who have higher salaries, hence the right skew.\n"
      ],
      "id": "ba61c536"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "# Clean the data by removing null, empty, and negative salary values\n",
        "data_clean = data[data['Salary'].notnull() & (data['Salary'] != '')]\n",
        "data_clean = data_clean[data_clean['Salary'] >= 0]\n",
        "\n",
        "# Plot the histogram\n",
        "plt.hist(data_clean['Salary'], bins=8, color='skyblue', edgecolor='black')\n",
        "plt.title('Histogram of Salary')\n",
        "plt.xlabel('Salary')\n",
        "plt.ylabel('Frequency')\n",
        "\n",
        "# Save the figure\n",
        "plt.savefig('../figures/salary_histogram.png', dpi=300, bbox_inches='tight')"
      ],
      "id": "825ad582",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Salary Histogram](../figures/salary_histogram.png)\n",
        "\n",
        "Travel Frequency is how frequently a person travels. I do not have this variable in my dataset.\n",
        "\n",
        "Customer Marketing Strategy is how well the airline markets their products. I don't have a direct variable for this in my dataset but I do know which enrollment types people did when they got a loyalty card.\n"
      ],
      "id": "c8bbf37b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "# Create a bar plot for Enrollment Type\n",
        "ax = sns.countplot(x='Enrollment Type', data=data)\n",
        "\n",
        "# Set labels and title\n",
        "plt.xlabel('Enrollment Type')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Distribution of Enrollment Type')\n",
        "\n",
        "# Add the count labels on top of the bars without decimals\n",
        "for p in ax.patches:\n",
        "    ax.annotate(f'{int(p.get_height())}', \n",
        "                (p.get_x() + p.get_width() / 2., p.get_height()), \n",
        "                ha='center', va='center', \n",
        "                fontsize=12, color='black', \n",
        "                xytext=(0, 5), textcoords='offset points')\n",
        "\n",
        "# Save the figure\n",
        "plt.savefig('../figures/enrollment_type_bar_chart.png', dpi=300, bbox_inches='tight')"
      ],
      "id": "86ad2038",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Salary Histogram](../figures/enrollment_type_bar_chart.png)\n",
        "\n",
        "Customer Engagement is how engaged a person is in the airline. I do not have this variable in my dataset.\n",
        "\n",
        "CLV is Customer Lifetime Value, or how much revenue a single person generates the airline company. It seems that most people earn the airline between roughly $2,000 and $15,000.\n"
      ],
      "id": "3b31675f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "# Clean the data and remove negative values\n",
        "data_clean = data[data['CLV'].notnull() & (data['CLV'] != '')]\n",
        "data_clean = data_clean[data_clean['CLV'] >= 0]  \n",
        "\n",
        "# Plot the histogram\n",
        "plt.hist(data_clean['CLV'], bins=6, edgecolor='black')\n",
        "\n",
        "# Add titles and labels\n",
        "plt.title('Distribution of Customer Lifetime Value (CLV)')\n",
        "plt.xlabel('Customer Lifetime Value (CLV)')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "# Save the figure\n",
        "plt.savefig('../figures/clv_histogram.png', dpi=300, bbox_inches='tight')"
      ],
      "id": "8b709334",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Salary Histogram](../figures/clv_histogram.png)\n",
        "\n",
        "\n",
        "## Milestone 7: Estimate Causal Effects\n"
      ],
      "id": "df3ce1d3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# eval: false\n",
        "import numpy as np\n",
        "import polars as pl\n",
        "import pymc as pm\n",
        "import arviz as az\n",
        "import seaborn as sns\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "# Set the parameter values.\n",
        "beta0 = 1000\n",
        "income = 70000\n",
        "flight_dist = 3500\n",
        "travel_freq = 5\n",
        "cust_marketing_strat = 1\n",
        "cust_engagement = 3\n",
        "loyalty_card_status = 1000\n",
        "n = 100\n",
        "\n",
        "# Simulate Data\n",
        "sim_data = (\n",
        "    pl.DataFrame({\n",
        "        'x': np.random.uniform(0, 7, size=n),\n",
        "        'flight_dist': np.random.uniform(0, 10000, size=n),\n",
        "        'travel_freq': np.random.uniform(1, 10, size=n),\n",
        "        'cust_marketing_strat': np.random.uniform(0, 5, size=n),\n",
        "        'cust_engagement': np.random.uniform(1, 10, size=n),\n",
        "        'loyalty_card_status': np.random.choice([0, 1], size=n)\n",
        "    })\n",
        "    .with_columns([ \n",
        "        (\n",
        "            beta0 + income * pl.col('x') + flight_dist * pl.col('flight_dist') +\n",
        "            travel_freq * pl.col('travel_freq') +\n",
        "            cust_marketing_strat * pl.col('cust_marketing_strat') +\n",
        "            cust_engagement * pl.col('cust_engagement') +\n",
        "            loyalty_card_status * pl.col('loyalty_card_status') +\n",
        "            np.random.normal(0, 3, size=n)\n",
        "        ).alias('CLV')\n",
        "    ])\n",
        ")\n",
        "\n",
        "# Separate predictors and outcome\n",
        "X = sim_data[['x', 'flight_dist', 'travel_freq', 'cust_marketing_strat', 'cust_engagement', 'loyalty_card_status']].to_numpy()\n",
        "CLV = sim_data['CLV'].to_numpy()\n",
        "\n",
        "# Bayesian Linear Regression Model\n",
        "with pm.Model() as clv_model:\n",
        "    # Priors\n",
        "    alpha = pm.Normal('alpha', mu=0, sigma=1000)\n",
        "    beta = pm.Normal('beta', mu=0, sigma=50000, shape=X.shape[1])  # One coefficient per feature\n",
        "    sigma = pm.HalfNormal('sigma', sigma=100)\n",
        "\n",
        "    # Likelihood\n",
        "    mu = alpha + X @ beta  # Matrix multiplication of predictors and coefficients\n",
        "    y_obs = pm.Normal('y_obs', mu=mu, sigma=sigma, observed=CLV)\n",
        "\n",
        "    # Posterior Sampling\n",
        "    trace = pm.sample(1000, return_inferencedata=True)\n",
        "\n",
        "# Summary of results\n",
        "summary = az.summary(trace, round_to=2)\n",
        "print(summary)\n",
        "\n",
        "# Visualizing the marginal posteriors\n",
        "az.plot_trace(trace, combined=True)\n",
        "\n",
        "\n",
        "# Save the figure as a file\n",
        "plt.savefig(\"trace_plot.png\", dpi=300, bbox_inches=\"tight\")\n",
        "\n",
        "# Show the plot (optional)\n",
        "plt.show()"
      ],
      "id": "267ff1db",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![trace plot](../figures/trace_plot.png)\n",
        "\n",
        "\n",
        "## Milestone 8: Intermediate Presentation\n",
        "\n",
        "See my intermediate presentation [Intermediate Presentation Slides](https://github.com/marcdotson/causal-inference/blob/main/presentations/multivariate-models.html). To summarize some feedback:\n",
        "\n",
        "- Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n",
        "- Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n",
        "- Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n",
        "- Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n",
        "\n",
        "\n",
        "\n",
        "## Milestone 9: Run Conjoint Experiment\n",
        "\n",
        "\n",
        "\n",
        "![DAG](../figures/Airline%20Loyalty%20Conjoint%20Survey%20-%20Ever%20been%20on%20a%20plane_%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Airline%20Loyalty%20Conjoint%20Survey%20-%20Employed%20rn_%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Airline%20Loyalty%20Conjoint%20Survey%20-%2018_plus_%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Airline%20Loyalty%20Conjoint%20Survey%20-%20How%20often%20do%20you%20fly_%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Airline%20Loyalty%20Conjoint%20Survey%20-%20Travel%20Reason_%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Loyalty%20Card%20Package%20Options%20-%20Card%20Type%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Loyalty%20Card%20Package%20Options%20-%20Benefit%201%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Loyalty%20Card%20Package%20Options%20-%20Benefit%202%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Loyalty%20Card%20Package%20Options%20-%20Price%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Loyalty%20Card%20Package%20Options%20-%20Attribute%20importance%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Airline%20Loyalty%20Conjoint%20Survey%20-%20Buy%20a%20card_%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Airline%20Loyalty%20Conjoint%20Survey%20-%20Yearly%20Income%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Airline%20Loyalty%20Conjoint%20Survey%20-%20Education%20Level%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Airline%20Loyalty%20Conjoint%20Survey%20-%20Age%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Airline%20Loyalty%20Conjoint%20Survey%20-%20Gender%20Chart.png)\n",
        "\n",
        "![DAG](../figures/Airline%20Loyalty%20Conjoint%20Survey%20-%20Married_%20Chart.png)\n",
        "\n",
        "\n",
        "\n",
        "## Milestone 10: Implement Diff-in-Diff Strategy\n",
        "\n",
        "\n",
        "## Milestone 11: Clean Up Project Report\n",
        "\n",
        "I created and cleaned up my project report in the writing folder.\n",
        "\n",
        "The CLV histogram now have bins that touch and a more appropriate number of bins.\n",
        "\n",
        "The Salary histogram no longer has a bin below zero (since you can't have a negative salary).\n",
        "\n",
        "I updated my DAG along the way.\n",
        "\n",
        "![DAG](../figures/DAG_CLV.jpg)"
      ],
      "id": "f0352926"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\rhigb\\anaconda3\\envs\\pymc_env\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}